
// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.AutoSpreadsheet;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc330.Beachbot2014Java.commands.*;
import org.usfirst.frc330.Beachbot2014Java.subsystems.*;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    Command autonomousCommand;
    public static OI oi;
    public static AutoSpreadsheet auto;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Arm arm;
    public static Shooter shooter;
    public static Wings wings;
    public static Pickup pickup;
    public static SmartDashboardSender smartDashboardSender;
    public static LEDs lEDs;
    public static PowerDistributionPanel pdp;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    BufferedWriter writer = null;
    private static boolean practicerobot;
    public static boolean isPracticerobot() {
        return practicerobot;
    }
    
    public void robotInit() {
        if (!Preferences.getInstance().containsKey("PracticeRobot"))
        {
            Preferences.getInstance().putBoolean("PracticeRobot", false);
            Preferences.getInstance().save();
        }
        practicerobot = Preferences.getInstance().getBoolean("PracticeRobot", false);
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        arm = new Arm();
        shooter = new Shooter();
        wings = new Wings();
        pickup = new Pickup();
        smartDashboardSender = new SmartDashboardSender();
        lEDs = new LEDs();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pdp = new PowerDistributionPanel();
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
	    auto = new AutoSpreadsheet();
        auto.readScripts();
        
        Random random = new Random();
        
        try {
			writer = new BufferedWriter(new FileWriter("/home/lvuser/pdp" + random.nextInt() + ".csv"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        
        SmartDashboard.putNumber("KinectRightOffset", 0);
        SmartDashboard.putNumber("KinectLeftOffset", 0);
        
//        SmartDashboard.putData("Scheduler", Scheduler.getInstance());
        
        
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }
    public void autonomousInit() {
        RobotMap.chassisGyro.startGyro();
       
//        System.out.println("In Autonomous Init");
        chassis.resetPosition();
        autonomousCommand = auto.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        System.out.println("Running Auto: " + autonomousCommand.getName());
        try {
			writer.write("Auto");
			writer.newLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
//        System.out.println("AP");
        Scheduler.getInstance().run();
        chassis.calcPeriodic();
        pickup.calcPeriodic();
        try {
			getPDPdata();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    public void teleopInit() {
        RobotMap.chassisGyro.startGyro();
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        try {
			writer.write("Teleop");
			writer.newLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
    }
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        chassis.calcPeriodic();
        pickup.calcPeriodic();
        try {
			getPDPdata();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void testInit() {
        RobotMap.chassisGyro.startGyro();
        auto.readScripts();
        Robot.chassis.stopDrive();
    }
    
    public void disabledPeriodic()
    {
        auto.checkForChange();
        chassis.calcPeriodic();
        RobotMap.chassisGyro.calibrateGyro();
        Scheduler.getInstance().run();
    }
    
    public void disabledInit()
    {
//        System.out.println("In Disabled Init");
        if (autonomousCommand != null) autonomousCommand.cancel();
        auto.readScripts();
        Robot.chassis.stopDrive();     
        Robot.arm.stopArm();
        Robot.pickup.setPickupMotorOff();
        try {
			writer.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
    }    
    double pdpArray[][] = new double[100][18];
    int pdpLine = 0;
    
    private void getPDPdata() throws IOException {
    	for (int i=0; i<16; i++) {
    		pdpArray[pdpLine][i] = pdp.getCurrent(i);
    	}
    	pdpArray[pdpLine][16] = pdp.getVoltage();
    	pdpArray[pdpLine][17] = pdp.getTemperature();
    	if (pdpLine == 99) {
    		for (int j=0; j<100; j++) {
	    		for (int i=0; i<18; i++) {
	    			writer.write(pdpArray[j][i] + ",");
	    		}
	    		writer.newLine();
    		}
    	} 	
    	
    	if (pdpLine >=99)
    		pdpLine = 0;
    	else
    		pdpLine++;
    }
    
}
